name: AI Fix Agent

on:
  issue_comment:
    types: [created]

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: ai-fix-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  fix-agent:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/ai:fix')
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            });
            
            core.setOutput('pr_number', pr.number);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('head_sha', pr.head.sha);

      - name: Run Fix Agent
        run: |
          # Create container overrides with environment variables
          CONTAINER_OVERRIDES=$(jq --arg token "${{ secrets.GITHUB_TOKEN }}" --arg owner "${{ github.repository_owner }}" --arg repo "${{ github.event.repository.name }}" --arg pr "${{ steps.pr-details.outputs.pr_number }}" --arg branch "${{ steps.pr-details.outputs.head_ref }}" '
            [{
              "name": "programmer-agent",
              "environment": [
                {"name": "NODE_ENV", "value": "production"},
                {"name": "GITHUB_TOKEN", "value": $token},
                {"name": "GH_OWNER", "value": $owner},
                {"name": "GH_REPO", "value": $repo},
                {"name": "PR_NUMBER", "value": $pr},
                {"name": "BRANCH", "value": $branch},
                {"name": "ASSIGNEE", "value": "ai-bot"},
                {"name": "DEFAULT_BRANCH", "value": "main"},
                {"name": "POLICY_PATH", "value": "/workspace/policy.yaml"}
              ]
            }]
          ' <<< '{}')
          
          # Run the task
          TASK_ARN=$(aws ecs run-task \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --task-definition ${{ secrets.PROGRAMMER_TASK_DEFINITION }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
            --overrides "{\"containerOverrides\":$CONTAINER_OVERRIDES}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Task started: $TASK_ARN"
          
          # Wait for task to complete
          echo "Waiting for task to complete..."
          aws ecs wait tasks-stopped --cluster ${{ secrets.ECS_CLUSTER }} --tasks "$TASK_ARN" --region ${{ secrets.AWS_REGION }}
          
          # Get task exit code
          EXIT_CODE=$(aws ecs describe-tasks --cluster ${{ secrets.ECS_CLUSTER }} --tasks "$TASK_ARN" --region ${{ secrets.AWS_REGION }} --query 'tasks[0].containers[0].exitCode' --output text)
          
          echo "Task completed with exit code: $EXIT_CODE"
          
          if [ "$EXIT_CODE" != "0" ]; then
            echo "Task failed with exit code: $EXIT_CODE"
            exit 1
          fi