name: AI Product Agent

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: ai-product-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  product-agent:
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Product Agent
        run: |
          # Create container overrides with environment variables
          CONTAINER_OVERRIDES=$(jq --arg token "${{ secrets.GITHUB_TOKEN }}" --arg owner "${{ github.repository_owner }}" --arg repo "${{ github.event.repository.name }}" --arg pr "${{ github.event.pull_request.number }}" '
            [{
              "name": "product-agent",
              "environment": [
                {"name": "NODE_ENV", "value": "production"},
                {"name": "GITHUB_TOKEN", "value": $token},
                {"name": "GH_OWNER", "value": $owner},
                {"name": "GH_REPO", "value": $repo},
                {"name": "PR_NUMBER", "value": $pr},
                {"name": "POLICY_PATH", "value": "/workspace/policy.yaml"}
              ]
            }]
          ' <<< '{}')
          
          # Run the task
          TASK_ARN=$(aws ecs run-task \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --task-definition ${{ secrets.PRODUCT_TASK_DEFINITION }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=ENABLED}" \
            --overrides "{\"containerOverrides\":$CONTAINER_OVERRIDES}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Task started: $TASK_ARN"
          
          # Wait for task to complete
          echo "Waiting for task to complete..."
          aws ecs wait tasks-stopped --cluster ${{ secrets.ECS_CLUSTER }} --tasks "$TASK_ARN" --region ${{ secrets.AWS_REGION }}
          
          # Get task exit code
          EXIT_CODE=$(aws ecs describe-tasks --cluster ${{ secrets.ECS_CLUSTER }} --tasks "$TASK_ARN" --region ${{ secrets.AWS_REGION }} --query 'tasks[0].containers[0].exitCode' --output text)
          
          echo "Task completed with exit code: $EXIT_CODE"
          
          if [ "$EXIT_CODE" != "0" ]; then
            echo "Task failed with exit code: $EXIT_CODE"
            exit 1
          fi